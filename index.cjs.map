{"version":3,"sources":["../src/server/index.ts","../src/transport/index.ts","../src/client/index.ts","../src/ai/openai.ts","../src/env/index.ts"],"sourcesContent":["import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { z } from 'zod';\nimport { serverTransport } from '../transport/index.js';\n// Create an MCP server\nconst server = new McpServer({\n  name: 'Demo',\n  version: '1.0.0',\n});\nserver.prompt('review-code', { code: z.string() }, ({ code }) => ({\n  messages: [\n    {\n      role: 'user',\n      content: {\n        type: 'text',\n        text: `Please review this code:\\n\\n${code}`,\n      },\n    },\n  ],\n}));\n// Add an addition tool\nserver.tool('add', { a: z.number(), b: z.number() }, async ({ a, b }) => ({\n  content: [{ type: 'text', text: String(a + b) }],\n}));\nserver.tool('乘法', { a: z.number(), b: z.number() }, async ({ a, b }) => ({\n  content: [{ type: 'text', text: String(a * b) }],\n}));\n// Add a dynamic greeting resource\nserver.resource(\n  'greeting',\n  new ResourceTemplate('greeting://{name}', { list: undefined }),\n  async (uri, { name }) => ({\n    contents: [\n      {\n        uri: uri.href,\n        text: `Hello, ${name}!`,\n      },\n    ],\n  }),\n);\n\n// Start receiving messages on stdin and sending messages on stdout\nconst transport = serverTransport;\nserver.connect(transport);\n","import { InMemoryTransport } from '@modelcontextprotocol/sdk/inMemory.js';\n\nexport const [clientTransport, serverTransport] = InMemoryTransport.createLinkedPair();\n","import { Client } from '@modelcontextprotocol/sdk/client/index.js';\nimport { clientTransport } from '../transport/index.js';\nimport { aiFunctionCall, defaultOpenai } from '../ai/openai.js';\n\nconst transport = clientTransport;\n\nconst client = new Client(\n  {\n    name: 'example-client',\n    version: '1.0.0',\n  },\n  {\n    capabilities: {\n      prompts: {},\n      resources: {},\n      tools: {},\n    },\n  },\n);\nasync function test() {\n  await client.connect(transport);\n  console.log('[aiFunctionCall start]');\n  const { res: aiRes } = await aiFunctionCall(\n    { openai: defaultOpenai },\n    client,\n    `算出下列算式的答案\n    1+3=?\n    99*78=?`,\n  );\n  console.log('[aiRes]', JSON.stringify(aiRes, null, 2));\n\n  if (aiRes instanceof Error) {\n    console.error(aiRes);\n  } else {\n    const callToolRes = await Promise.all(\n      aiRes.callTool?.map(async ({ name, arg }) => {\n        return {\n          res: await client.callTool({\n            name,\n            arguments: arg,\n          }),\n          name,\n          arg,\n        };\n      }) ?? [],\n    );\n    console.log('[callToolRes]', callToolRes);\n  }\n  return;\n  // List prompts\n  const prompts = await client.listPrompts();\n  const prompt = await client.getPrompt({\n    name: 'review-code',\n    arguments: {\n      code: 'console.log(\"Hello, world!\")',\n    },\n  });\n\n  // List resources\n  const resources = await client.listResources();\n\n  // Read a resource\n  const resource = await client.readResource({\n    uri: 'greeting://example.txt',\n  });\n\n  // Call a tool\n  const result = await client.callTool({\n    name: 'add',\n    arguments: {\n      a: 1,\n      b: 2,\n    },\n  });\n  console.log('[result]', result);\n  //   client.\n}\ntest();\n","import type { Client } from '@modelcontextprotocol/sdk/client/index.js';\nimport { Configuration, OpenAIApi, type ResponseTypes } from 'openai-edge';\nimport { Env } from '../env';\n\nconst configuration = new Configuration({\n  apiKey: Env.default_apiKey,\n  basePath: Env.default_apiBaseUrl,\n});\nexport const defaultOpenai = new OpenAIApi(configuration);\n\ntype AI = {\n  openai: OpenAIApi;\n  model?: string;\n  max_tokens?: number;\n  temperature?: number;\n};\nconst defaultConfig = {\n  //   model: \"gpt-3.5-turbo\",\n  /** 智谱清言 免费模型 */\n  model: 'CodeGeeX-4',\n  //   max_tokens: undefined,\n  max_tokens: 9999,\n  temperature: 0.3,\n};\nexport async function ai搜索关键词提取(ai: AI = { openai: defaultOpenai }, userInput: string) {\n  // 你是一个专业辅助用户搜索的助手，请从用户的提问之中拆分和联想出可以用于搜索的词组\n\n  // ## 你回答的内容\n  // 1. 格式：你的回答应该是一个单行json字符串数组，不要包含其他的内容\n  // 2. 不仅仅要包含用户提问中出现过的关键词，你还应该要联想到关键词的可能变体\n\n  // ## 搜索引擎的特性\n  // 1. 搜索程序支持使用空格连接多个关键词\n  // 2. 有时候单个关键词可以搜索到相关内容，多个关键词连接反而搜索不到，所以你不仅要返回空格连接的多个关键词，还应该返回需要搜索的单个关键词之类的，但是太多的单个关键词又可能搜索到无关紧要的内容，这个就是需要你取舍的地方了\n  const completion = await ai.openai.createChatCompletion({\n    model: ai.model ?? defaultConfig.model,\n    messages: [\n      {\n        role: 'system',\n        content: `你是一名助理，专门协助用户进行搜索。请按照以下规则提供答案：\n\n1. 输出格式：**JSON 格式**，不要使用代码块,要确保你的回答可以直接被 JSON.parse。\n2. 内容要求：\n   - 答案应该是**单行的 JSON 字符串数组**。\n   - 包含**用户问题中的关键词**及其**可能的变体**。\n3. 搜索引擎功能：\n   - 支持使用空格连接多个关键词，但也要考虑**单个关键词**的可能性。\n   - 选择合适的关键词，以避免返回过多无关的结果。\n\n示例：\n用户: “有哪些关键词”\n你: [\"关键词1\", \"关键词2\"]\n`,\n      },\n      { role: 'user', content: userInput },\n    ],\n    max_tokens: ai.max_tokens ?? defaultConfig.max_tokens,\n    temperature: ai.temperature ?? defaultConfig.temperature,\n    stream: false,\n  });\n  const data = (await completion.json()) as ResponseTypes['createChatCompletion'];\n  const resStr = data.choices[0].message!.content!;\n  let queryArr;\n  try {\n    if (resStr.startsWith('```')) {\n      const lines = resStr.split('\\n');\n      lines[0] = '';\n      lines[lines.length - 1] = '';\n      queryArr = JSON.parse(lines.join('\\n'));\n    } else {\n      queryArr = JSON.parse(resStr);\n    }\n  } catch (error) {\n    console.log('[error]', error);\n    queryArr = [resStr];\n  }\n  return {\n    res: queryArr,\n    raw: data,\n  };\n}\nexport async function ai回答(\n  ai: AI = { openai: defaultOpenai },\n  userInput: string,\n  searchMd: string,\n) {\n  const completion = await ai.openai.createChatCompletion({\n    model: ai.model ?? defaultConfig.model,\n    messages: [\n      {\n        role: 'system',\n        content: `你是用户的笔记ai提问助手，请根据用户的问题和你检索到的笔记内容来回答用户的问题\n## 回答的格式\n\n你的回答要表示是基于哪些块的内容回答的，表现方式是在对应回答的后面添加 :[种花心得(这个块的内容摘要)](siyuan://blocks/20240113141417-va4uedb(笔记块的id))\n例如 :\n\n提问:怎么养兰花\n回答:\n\n1. 保持适宜的空气湿度 [养兰花的第三天](siyuan://blocks/20130123242415-ad32fad12)\n2. 需要准备的一些工具:.....  [种花心得](siyuan://blocks/20160133242325-d23dfg1)\n\n## 注意你的回答最后面附加的链接 [] 内填的是这个块的摘要文本 () 中的 siyuan://blocks/id 是思源特有的链接方式\n`,\n      },\n      {\n        role: 'assistant',\n        content: `检索到的内容:\\n${searchMd}`,\n      },\n      { role: 'user', content: userInput },\n    ],\n    max_tokens: ai.max_tokens ?? defaultConfig.max_tokens,\n    temperature: ai.temperature ?? defaultConfig.temperature,\n    stream: false,\n  });\n  const data = (await completion.json()) as ResponseTypes['createChatCompletion'];\n  return {\n    res: data.choices[0].message!.content!,\n    raw: data,\n  };\n}\nexport async function aiFunctionCall(\n  ai: AI = { openai: defaultOpenai },\n  mcpClient: Client,\n  userInput: string,\n) {\n  const tools = await mcpClient.listTools();\n\n  const completion = await ai.openai.createChatCompletion({\n    model: ai.model ?? defaultConfig.model,\n    messages: [\n      {\n        role: 'system',\n        content: `你是一个 aiFunctionCall ，主要就是通过分析用户的输入来判断是否要调用mcp server提供的某些功能\n如果你判断解决用户的问题需要调用对应的功能就回复相应的代码,后续会通过 js 来调用这些工具返回结果给用户的\n## 你的回复应该是一个合法的json，可以直接被 JSON.parse() 解析，不需要额外的处理。\n\n## 调用 tool 的回复示例\n### 注意，你应该在callTool 数组中列出所有需要调用的tool，并且每个tool的参数都放在callTool数组中。例如：\n\n\\`\\`\\`js\n{\n    \"callTool\":[\n        {\"name\":\"tool name\",\"arg\":{\"参数名\":\"参数值\"}},\n        {\"name\":\"other tool name\",\"arg\":{\"参数名\":<任何合法的json值>}}\n        // ... 其他需要调用的tool\n    ]\n}\n\\`\\`\\`\n  `,\n      },\n      {\n        role: 'assistant',\n        content: `#mcp server提供的功能\n## tools\n${tools.tools\n  .map((tool) => {\n    const toolStr =\n      `### ${tool.name}\\n` +\n      (tool.description ? `- **description**: ${tool.description}\\n` : '') +\n      `\n- **parameters**: ${JSON.stringify({\n        ...tool.inputSchema,\n        //#region 去除一些没啥用的字段\n        type: undefined,\n        $schema: undefined,\n        //#endregion 去除一些没啥用的字段\n      })}\n`;\n    return toolStr;\n  })\n  .join('\\n\\n')}`,\n      },\n      { role: 'user', content: userInput },\n    ],\n    max_tokens: ai.max_tokens ?? defaultConfig.max_tokens,\n    temperature: ai.temperature ?? defaultConfig.temperature,\n    stream: false,\n  });\n  const data = (await completion.json()) as ResponseTypes['createChatCompletion'];\n  return {\n    res: JSON_parse_AIResponse(data.choices[0].message!.content!),\n    raw: data,\n  };\n}\n\nfunction JSON_parse_AIResponse(resStr: string) {\n  let jsonStr;\n  try {\n    // 如果ai输出的是markdown 代码块形式的json，这里去除掉外层的代码块符号\n    if (resStr.startsWith('```')) {\n      const lines = resStr.trim().split('\\n');\n      lines[0] = '';\n      lines[lines.length - 1] = '';\n      jsonStr = lines.join('\\n').trim();\n    } else {\n      jsonStr = resStr.trim();\n    }\n    // console.log('[jsonStr]====', jsonStr);\n    // console.log('[jsonStr]====');\n\n    const jsonObj = JSON.parse(jsonStr);\n    return jsonObj as { callTool?: { name: string; arg: { [key: string]: any } }[] };\n  } catch (error: unknown) {\n    return error as Error;\n  }\n}\n","import { config } from 'dotenv';\nconst { parsed: env } = config();\n\nexport const Env = {\n  default_apiKey: env!.default_apiKey as string,\n  default_apiBaseUrl: env!.default_apiBaseUrl as string,\n  default_model: env!.default_model as string,\n  default_max_tokens: Number(env!.default_max_tokens),\n  default_temperature: Number(env!.default_temperature),\n};\n"],"mappings":"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","names":["transport"]}