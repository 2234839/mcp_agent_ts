{"version":3,"sources":["../../src/cli/translate.ts","../../src/ai/translate.ts","../../src/env/index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { program } from 'commander';\nimport { translateMarkdownFile } from '../ai/translate';\nimport path from 'path';\nimport { Effect } from 'effect';\nimport { AiService } from 'src/service';\nimport { Env } from 'src/env';\nimport OpenAI from 'openai';\n\nprogram\n  .name('mcp_agent_ts-translate-md')\n  .description('CLI tool to translate markdown files using AI')\n  .version('1.0.0');\n\nprogram\n  .command('translate')\n  .description('Translate a markdown file to target language')\n  .requiredOption('-i, --input <path>', 'Input markdown file path')\n  .requiredOption('-o, --output <path>', 'Output file path')\n  .requiredOption('-l, --language <language>', 'Target language (e.g. \"Chinese\", \"French\")')\n  .action(async (options) => {\n    console.log(`Translating ${options.input} to ${options.language}...`);\n\n    const defaultOpenai = new OpenAI({\n      apiKey: Env.default_apiKey,\n      baseURL: Env.default_apiBaseUrl,\n    });\n    const r = await Effect.runPromise(\n      translateMarkdownFile(\n        path.resolve(options.input),\n        path.resolve(options.output),\n        options.language,\n      ).pipe(\n        Effect.provideService(AiService, {\n          openai: defaultOpenai,\n          model: Env.default_model,\n        }),\n      ),\n    );\n    console.log(`Translation saved to ${options.output}`);\n  });\n\nprogram.parseAsync(process.argv).catch(console.error);\n","import { Effect, Context } from 'effect';\nimport { AiService } from '../service';\n\nexport function translateText(\n  text: string,\n  targetLanguage: string\n): Effect.Effect<string, Error, AiService> {\n  return Effect.gen(function* () {\n    const ai = yield* AiService;\n\n    const completion = yield* Effect.tryPromise({\n      try: () => ai.openai.chat.completions.create({\n        model: ai.model,\n        messages: [\n          {\n            role: 'system',\n            content: `You are a professional translator. Translate the following text to ${targetLanguage} while strictly preserving:\n1. Original formatting and markdown syntax\n2. Technical terms accuracy\n3. Any text inside markdown links like \\`[中文文档](./README_zh.md)\\` or \\`[English Doc](./README.md)\\` MUST REMAIN UNCHANGED\n4. Code blocks and inline code snippets MUST NOT be translated\n\n特别注意：如果遇到类似 \\`[...文档...](...)\\` 的Markdown链接，无论其中是什么语言，都原样保留不要翻译`\n          },\n          { role: 'user', content: text }\n        ],\n        max_tokens: ai.max_tokens,\n        temperature: ai.temperature,\n        stream: false\n      }),\n      catch: (e) => new Error(`Translation failed: ${e}`)\n    });\n\n    return completion.choices[0].message?.content || '';\n  });\n}\n\nexport function translateMarkdownFile(\n  filePath: string,\n  outputPath: string,\n  targetLanguage: string\n): Effect.Effect<void, Error, AiService> {\n  return Effect.gen(function* () {\n    const fs = yield* Effect.promise(() => import('fs/promises'));\n    const text = yield* Effect.tryPromise({\n      try: () => fs.readFile(filePath, 'utf-8'),\n      catch: (e) => new Error(`Failed to read file: ${e}`)\n    });\n    const translated = yield* translateText(text, targetLanguage);\n    yield* Effect.tryPromise({\n      try: () => fs.writeFile(outputPath, translated),\n      catch: (e) => new Error(`Failed to write file: ${e}`)\n    });\n  });\n}\n","import { config } from 'dotenv';\nconst { parsed: env } = config();\n\nexport const Env = {\n  default_apiKey: env!.default_apiKey as string,\n  default_apiBaseUrl: env!.default_apiBaseUrl as string,\n  default_model: env!.default_model as string,\n  default_max_tokens: Number(env!.default_max_tokens),\n  default_temperature: Number(env!.default_temperature),\n\n  // 用于单元测试的环境变量\n  bigmodel_apiKey: env!.bigmodel_apiKey as string,\n  bigmodel_apiBaseUrl: env!.bigmodel_apiBaseUrl as string,\n\n  // 思源配置\n  siyuan_baseUrl: env!.siyuan_baseUrl as string,\n  siyuan_apiKey: env!.siyuan_apiKey as string,\n} as const;\n"],"mappings":"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","names":["Effect","Effect"]}