{"version":3,"sources":["../src/server/siyuan/index.ts"],"sourcesContent":["import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { Effect } from 'effect';\nimport { SiyuanService } from 'src/service';\nimport { z } from 'zod';\n\nexport const siyuanServer = Effect.gen(function* ($) {\n  const siyuan = yield* SiyuanService;\n  const server = new McpServer({\n    name: '思源',\n    version: '1.0.0',\n  });\n\n  // 思源搜索工具\n  server.tool(\n    'search-siyuan',\n    '搜索思源笔记中的内容',\n    {\n      queryText: z.string(),\n    },\n    async ({ queryText: query }) => {\n      const data = {\n        query,\n        method: 0,\n        types: {\n          audioBlock: true,\n          blockquote: true,\n          codeBlock: true,\n          databaseBlock: true,\n          document: true,\n          embedBlock: true,\n          heading: true,\n          htmlBlock: true,\n          iframeBlock: true,\n          list: false,\n          listItem: false,\n          mathBlock: true,\n          paragraph: true,\n          superBlock: true,\n          table: false,\n          videoBlock: true,\n          widgetBlock: true,\n        },\n        paths: [],\n        groupBy: 0,\n        orderBy: 0,\n        page: 1,\n        reqId: Date.now(),\n      };\n\n      try {\n        const response = await fetch(`${siyuan.conf.baseUrl}/api/search/fullTextSearchBlock`, {\n          headers: {\n            accept: '*/*',\n            'accept-language': 'zh-CN',\n            'content-type': 'text/plain;charset=UTF-8',\n            Authorization: `Token ${siyuan.conf.apiKey}`,\n          },\n          referrerPolicy: 'strict-origin-when-cross-origin',\n          body: JSON.stringify(data),\n          method: 'POST',\n          mode: 'cors',\n          credentials: 'include',\n        });\n\n        const result = await response.json();\n        const blocks = result.data.blocks as {\n          id: string;\n          fcontent: string;\n          content: string;\n          name: string;\n        }[];\n\n        return {\n          content: blocks.map((block) => ({\n            type: 'text',\n            text: `${block.name} - ${block.id}\\n${block.fcontent.slice(0, 100)}...`,\n          })),\n        };\n      } catch (e) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `搜索失败: ${e instanceof Error ? e.message : String(e)}`,\n            },\n          ],\n        };\n      }\n    },\n  );\n\n  return server;\n});\n"],"mappings":";;;;;AAAA,SAAS,iBAAmC;AAC5C,SAAS,cAAc;AAEvB,SAAS,SAAS;AAEX,IAAM,eAAe,OAAO,IAAI,WAAW,GAAG;AACnD,QAAM,SAAS,OAAO;AACtB,QAAM,SAAS,IAAI,UAAU;AAAA,IAC3B,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AAGD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,MACE,WAAW,EAAE,OAAO;AAAA,IACtB;AAAA,IACA,OAAO,EAAE,WAAW,MAAM,MAAM;AAC9B,YAAM,OAAO;AAAA,QACX;AAAA,QACA,QAAQ;AAAA,QACR,OAAO;AAAA,UACL,YAAY;AAAA,UACZ,YAAY;AAAA,UACZ,WAAW;AAAA,UACX,eAAe;AAAA,UACf,UAAU;AAAA,UACV,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,WAAW;AAAA,UACX,aAAa;AAAA,UACb,MAAM;AAAA,UACN,UAAU;AAAA,UACV,WAAW;AAAA,UACX,WAAW;AAAA,UACX,YAAY;AAAA,UACZ,OAAO;AAAA,UACP,YAAY;AAAA,UACZ,aAAa;AAAA,QACf;AAAA,QACA,OAAO,CAAC;AAAA,QACR,SAAS;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,QACN,OAAO,KAAK,IAAI;AAAA,MAClB;AAEA,UAAI;AACF,cAAM,WAAW,MAAM,MAAM,GAAG,OAAO,KAAK,OAAO,mCAAmC;AAAA,UACpF,SAAS;AAAA,YACP,QAAQ;AAAA,YACR,mBAAmB;AAAA,YACnB,gBAAgB;AAAA,YAChB,eAAe,SAAS,OAAO,KAAK,MAAM;AAAA,UAC5C;AAAA,UACA,gBAAgB;AAAA,UAChB,MAAM,KAAK,UAAU,IAAI;AAAA,UACzB,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,aAAa;AAAA,QACf,CAAC;AAED,cAAM,SAAS,MAAM,SAAS,KAAK;AACnC,cAAM,SAAS,OAAO,KAAK;AAO3B,eAAO;AAAA,UACL,SAAS,OAAO,IAAI,CAAC,WAAW;AAAA,YAC9B,MAAM;AAAA,YACN,MAAM,GAAG,MAAM,IAAI,MAAM,MAAM,EAAE;AAAA,EAAK,MAAM,SAAS,MAAM,GAAG,GAAG,CAAC;AAAA,UACpE,EAAE;AAAA,QACJ;AAAA,MACF,SAAS,GAAG;AACV,eAAO;AAAA,UACL,SAAS;AAAA,YACP;AAAA,cACE,MAAM;AAAA,cACN,MAAM,6BAAS,aAAa,QAAQ,EAAE,UAAU,OAAO,CAAC,CAAC;AAAA,YAC3D;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT,CAAC;","names":[]}